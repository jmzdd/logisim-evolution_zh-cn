#
# appear/AppearanceEditHandler.java
#
deleteSelectionAction = 删除选择
duplicateSelectionAction = 为所选项创建副本
pasteClipboardAction = 粘贴剪贴板
#
# appear/ClipboardActions.java
#
copySelectionAction = 复制选择
cutSelectionAction = 剪切选择
#
# appear/RevertAppearanceAction.java
#
revertAppearanceAction = 恢复外观
#
# appear/ShowStateDialog.java
#
showStateDialogCancelButton = 取消
showStateDialogEmptyNode = 空的电路 %s
showStateDialogNodeTitle = %s 的状态
showStateDialogOkButton = 确定
showStateDialogTitle = %s 的状态
#
# chronogram/chronogui/ChronoFrame.java
#
ButtonExport = 导出...
ButtonLoad = 载入文件
ChronoTitle = 时序图
ChronoHelp = 显示实时的信号值。Displays signal values in real time.
ChronoPrintTitle = 时序图: %s 的 %s
ButtonExportAsImage = 导出为图像
InputFileLoaded = 载入文件:
InputFileNoSysclk = No sysclk signal found
SimStatusCurrentScheme = 仿真当前方案Simulating the current scheme
SimStatusName = 状态:
SimStatusNoSignal = 在仿真->Chronogram中没有选择信号
SimStatusNoSysclk = 在仿真->Chronogram中添加 'sysclk' 信号供实时使用，或加载文件Add 'sysclk' signal in Simulate->Chronogram for real time use, or load file
NoSignalsSelected = 当前没有选择信号。| 使用 "选项 "面板添加引脚到电路，或选择信号。No signals currently selected. | Add pins to circuit, or select signals | using the "Options" panel.
optionsTab = 选项
optionsHelp = 配置时序图的信号、模式和时序Configure timing diagram signals, mode, and timing
selectionLabel = 信号和格式
modeLabel = 记录模式
timingLabel = Timing Options
historyLabel = 历史
historyUnlimited = Store unlimited history
historyLimit = Number of recent values to store:
timeScale = 时间刻度Time scale:
gateDelay = 门延迟Gate delay:
cycleLength = Clock cycle: %s ticks
nsFormat = %s ns
usFormat = %s \u00b5s
msFormat = %s ms
sFormat = %s s
perSecond = 每秒per second
perTick = 每个刻度per tick
stepTime = Stop-motion mode
stepCoarse = Coarse-grained summary
stepCoarseDescription = 只有当所有的信号都稳定下来时才会采集数据，忽略传播过程中可能发生的任何瞬时信号波动。每个捕获的值都被记录下来，就像它被保持稳定的 %s 一样。Data is captured only when all signals have stabilized, ignoring any transient signal fluctuations that may happen during propagation. Each captured value is recorded as if it were held stable for %s.
fineDetail = 捕获细粒度的细节Capture fine-grained details
stepFineDescription = 只要有任何信号值变化，包括传播过程中可能发生的任何瞬时信号波动，就会捕获数据。瞬时波动被记录下来，就像门延迟为 %s 一样，而稳定的信号被记录下来，就像它们被保持稳定为 %s 一样。Data is captured whenever any signal value changes, including any transient signal fluctuations that may happen during propagation. Transient fluctuations are recorded as if the gate delay were %s, and stable signals are recorded as if they were held stable for %s.
realTime = Continuous real-time mode
realCoarse = Coarse-grained summary
realCoarseDescription = Data is captured continuously, whenever the simulator is enabled, but transient signal fluctuations are ignored. Each second of real time is recorded as %s of simulated circuit time.
realFine = Fine-grained details
realFineDescription = Data is captured continuously, whenever the simulator is enabled, includin transient signal fluctuations. Each second of real time is recorded as %s of simulated circuit time.
clockTime = Clocked mode
clockCoarse = Coarse-grained summary 
clockCoarseDescriptionDual = Data is captured at each clock transition, ignoring any transient fluctuations that may happen between transitions or during propagation. Each clock cycle is recorded as if it took %s per cycle (%s per tick).
clockCoarseDescriptionRising = Data is captured at each rising clock transition, ignoring any transient fluctuations that may happen between transitions or during propagation. Each clock cycle is recorded as if it took %s per cycle (%s per tick).
clockCoarseDescriptionFalling = Data is captured at each falling clock transition, ignoring any transient fluctuations that may happen between transitions or during propagation. Each clock cycle is recorded as if it took %s per cycle (%s per tick).
clockCoarseDescriptionHigh = Data is captured continuously only when the clock is high, ignoring any transient signal fluctuations that may happen during propagation or while the clock is low. Changes when the clock is high are recorded as if the gate delay were %s, and each clock cycle is recorded as if it took %s per cycle (%s per tick).
clockCoarseDescriptionLow = Data is captured continuously only when the clock is low, ignoring any transient signal fluctuations that may happen during propagation or while the clock is high. Changes when the clock is low are recorded as if the gate delay were %s, and each clock cycle is recorded as if it took %s per cycle (%s per tick).
clockFine = Fine-grained details
clockFineDescription = Data is captured whenever any signal value changes, including any transient signal fluctuations that may happen during propagation. Transient fluctuations are recorded as if the gate delay were %s, and each clock cycle is recorded as if it took %s per cycle (%s per tick).
clockSourceLabel = Clock Source:
clockSourceNone = n/a
selectClockDriverMessage = This feature requires a clock component, but none were found within the circuit. Either add a clock component to the circuit, or select one of the inputs below to serve as a clock.
selectClockObserverMessage = Select a clock or signal to use as the primary clock.
selectClockMissingMessage = This mode requires a clock component, but none were found within the circuit. Either add a clock component to the circuit, or select one of the signals below to serve as a clock.
selectClockMultipleMessage = The circuit contains multiple clocks. Select one of the clocks or signals below to use as the primary clock.
clockDisciplineLabel = Clock Discipline:
clockDisciplineRising = capture on rising edge
clockDisciplineFalling = capture on falling edge
clockDisciplineDual = capture on both edges
clockDisciplineHigh = capture during clock high
clockDisciplineLow = capture during clock low
#
# chronogram/chronogui/LeftPanel.java
#
SignalNameName = 信号名称
SignalNameValue = 信号值
#
# chronogram/chronogui/PopupMenu.java
#
BusExpand = 拓展
BusFormat = 格式
#
# generic/AttributeSetTableModel.java
#
attributeChangeInvalidError = Attribute unchanged because request is invalid
FPGA_Supported = FPGA 支持状态:
#
# generic/AttrTable.java
#
attributeChangeInvalidTitle = 非法数值
attributeDialogTitle = 选择数值
#
# generic/ZoomControl.java
#
zoomShowGrid = 切换网格显示
ZoomText = 缩放控制:
#
# hex/Clip.java
#
hexPasteErrorTitle = 粘贴出错
hexPasteSupportedError = 剪贴板上的内容不能粘贴到编辑器中。
hexPasteTooSmall = 剪贴板 (%d 字) 内容过少，无法填满选定的\n区域 (%d 字). 确定要要粘贴?
#
# hex/HexFile.java
#
confirmOverwriteMessage = 文件已存在。要覆盖该文件吗?
confirmOverwriteTitle = 确认覆盖
hexFileOpenError = 无法打开文件: %s
hexFileWriteError = 文件写入错误: %s
hexFormatTitle = Hex 文件格式
ramLoadDialogTitle = 载入内存镜像
ramLoadErrorTitle = 内存镜像载入错误
ramSaveDialogTitle = 保存内存镜像
ramSaveErrorTitle = 内存镜像保存错误
#
# hex/HexFrame.java
#
closeButton = 关闭窗口
hexFrameMenuItem = Hex 编辑器
hexFrameTitle = Logisim-evolution: Hex 编辑器
openButton = 打开...
saveButton = 保存...
#
# log/FilePanel.java
#
fileAppendOption = 追加Append
fileCancelOption = 取消
fileCannotWriteMessage = 你没有权限写入 "%s"。
fileCannotWriteTitle = 文件不可用
fileDisableButton = 禁用
fileDisabled = 禁用文件输出。
fileEnableButton = 启用
fileEnabled = 启用文件输出。
fileExistsMessage = 文件 "%s" 已经存在。
fileExistsTitle = 文件已经存在
fileHeaderCheck = 包括标题行Include Header Line
fileHelp = 配置文件输出。
fileLabel = 文件:
fileOverwriteOption = 覆盖
fileSelectButton = 选择...
fileTab = 文件
#
# log/LogFrame.java
#
logFrameMenuItem = %s: 时序图
logFrameTitle = Logisim-evolution: 时序图 %s 的 %s
addRemoveSignals = 添加或移除信号
#
# log/SelectionPanel.java
#
selectionTab = 信号
selectionHelp = 选择要查看的信号。
selectionDesc = 拖动信号来选择或重新排列。
exploreLabel = 电路中可用的信号:
listLabel = 要查看的信号:
timeSelectionClock = 选择时钟:
timeSelectionEnable = 启用时间选择
timeSelectionFrequency = 频率:
#
# log/TablePanel.java
#
tableHelp = 查看最近数值的日志。View log of recent values.
tableTab = Table
#
# log/ValueTable.java
#
tableEmptyMessage = 选区为空。Selection is empty.
tableHeaderHelp = Radix:
#
# main/AttrTableCircuitModel.java
#
cannotModifyCircuitError = 此电路不可修改。
changeCircuitAttrAction = 改变电路
circuitAttrTitle = 电路: %s
#
# main/AttrTableComponentModel.java
#
changeAttributeAction = 修改属性
#
# main/AttrTableSelectionModel.java
#
hdlAttrTitle = VHDL 实体: %s
selectionAttributeAction = 改变所选项属性
selectionMultiple = 选择: %s × %s
selectionOne = 选择: %s
selectionVarious = 选择: %s 个项目
#
# main/AttrTableToolModel.java
#
toolAttrTitle = Tool: %s
#
# main/Canvas.java
#
canvasExceptionError = Simulation halted by internal error
canvasOscillationError = Oscillation apparent
canvasWidthError = Incompatible widths
#
# main/ExportImage.java
#
couldNotCreateFile = 无法创建文件。
exportEmptyCircuitsMessage = 没有可以导出的非空电路。
exportEmptyCircuitsTitle = 无法导出
exportGifFilter = GIF 文件 (*.gif)
exportImageDirectorySelect = 选择导出目录
exportImageProgress = 计算图像...
exportImageSelect = 导出图像
exportJpgFilter = JPEG 文件 (*.jpeg, *.jpg)
exportNewDirectoryErrorMessage = 无法创建文件夹
exportNewDirectoryErrorTitle = 无法创建文件夹
exportPngFilter = PNG 文件 (*.png)
exportSvgFilter = SVG 文件 (*.svg)
exportTikZFilter = TikZpicture 文件 (*.tex)
labelCircuits = Circuits:
labelImageFormat = 图像格式:
labelPrinterView = Printer View:
labelScale = 缩放比例:
#
# main/Frame.java
#
cancelOption = 取消
confirmCloseTitle = 确认关闭
confirmDiscardMessage = 是否保存对以下文件的更改: %s?
designTab = 设计
discardOption = 不保存
propertiesTab = 属性
saveOption = 保存
simulateTab = 仿真
stateTab = 状态
titleCircFileKnown = Logisim-evolution: %s of %s
titleFileKnown = Logisim-evolution: %s
#
# main/Print.java
#
labelHeader = Header:
labelRotateToFit = Rotate To Fit:
printEmptyCircuitsMessage = No non-empty circuits are available for printing.
printEmptyCircuitsTitle = 无法打印
printParmsTitle = 打印参数
#
# main/SelectionActions.java
#
circularError = Circular error
dropComponentAction = 拖动部件
dropComponentsAction = 拖动部件
moveSelectionAction = 移动选择
pasteCloneCancel = 取消
pasteCloneIgnore = 忽略
pasteCloneQuery = The clipboard includes "%s." The project doesn't include it, but it has another of the same name.
pasteCloneReplace = 替换
pasteCloneTitle = 器件
pasteDropMessage = Some clipboard components were not pasted because the project libraries do not support them:
pasteDropTitle = Components Not Pasted
#
# main/SimulationToolbarModel.java
#
simulateDisableTicksTip = Disable clock ticks
simulateEnableTicksTip = Enable clock ticks
simulateRunTip = Run simulator continuously
simulateStepTip = Step simulator once
simulateStopTip = 停止仿真
simulateTickFullTip = Tick clock one full cycle
simulateTickHalfTip = Tick clock one half cycle
#
# main/StatisticsDialog.java
#
statsCloseButton = 关闭
statsComponentColumn = 器件
statsDialogTitle = Logisim-evolution: %s Statistics
statsLibraryColumn = 库
statsRecursiveCountColumn = Recursive
statsSimpleCountColumn = Simple
statsUniqueCountColumn = Unique
#
# main/TickCounter.java
#
tickRateHz = %s Hz
tickRateKHz = %s kHz
#
# main/ToolAttributeAction.java
#
changeToolAttrAction = 更改工具属性Change Tool Attribute
#
# main/ToolboxToolbarModel.java
#
projectAddCircuitTip = 添加电路
projectEditAppearanceTip = 编辑查看的电路的外观Edit viewed circuit's appearance
projectMoveCircuitDownTip = 向下移动查看的电路列表Move viewed circuit down list
projectMoveCircuitUpTip = 向上移动查看的电路列表Move viewed circuit up list
projectRemoveCircuitTip = 移除正在查看的电路Remove viewed circuit
#
# menu/EditPopup.java
#
editAddControlItem = 添加顶点Add Vertex
editClearItem = 删除
editCopyItem = 复制
editCutItem = 剪切
editDuplicateItem = 创建副本
editLowerBottomItem = 置于底层Lower To Bottom
editLowerItem = 下移一层Lower Selection
editRaiseItem = 上移一层Raise Selection
editRaiseTopItem = 置于顶层Raise To Top
editRemoveControlItem = 删除顶点Remove Vertex
#
# menu/MenuEdit.java
#
editCantRedoItem = 无法重做
editCantUndoItem = 无法撤销
editMenu = 编辑
editPasteItem = 粘贴
editRedoItem = 重做 %s
editSelectAllItem = 全选
editUndoItem = 撤销 %s
#
# menu/MenuFile.java
#
fileCloseItem = 关闭
fileExportImageItem = 导出图像...
fileMenu = 文件
fileMergeItem = 合并电路...
fileNewItem = 新建项目
fileOpenItem = 打开项目...
filePreferencesItem = 首选项...
filePrintItem = 打印...
fileQuitItem = 退出
fileSaveAsItem = 另存为...
fileSaveItem = 保存
#
# menu/MenuHelp.java
#
helpAboutItem = 关于...
helpDisplayError = 无法显示帮助数据。
helpGuideItem = 用户指南
helpLibraryItem = 库参考说明
helpMenu = 帮助
helpNotFoundError = 找不到帮助数据。
helpsetUrl = doc/doc_en.hs
helpTutorialItem = 使用教程
helpUnavailableError = 无法加载帮助数据。
helpWindowTitle = Logisim-evolution 文档
#
# menu/MenuProject.java
#
projectImportVhdlItem = 导入 VHDL 实体...
projectMenu = 项目
projectMoveCircuitDownItem = 向上移动电路
projectMoveCircuitUpItem = 向下移动电路
projectOptionsItem = 选项...
projectRevertAppearanceItem = 恢复为默认外观
projectUnloadLibrariesItem = 卸载库...
#
# menu/MenuSimulate.java
#
simulateDownStateMenu = Go In To State
simulateGenVhdlFilesItem = 重新开始 VHDL 仿真
simulateLogItem = 时序图
simulateMenu = 仿真
simulateRunItem = 自动运行
simulateResetItem = 重置仿真
simulateStepItem = 单步运行
simulateTestItem = Test Vector...
simulateTickFreqItem = %s Hz
simulateTickHalfItem = 时钟前进半个周期Manual Tick Half Cycle
simulateTickFullItem = 时钟前进一个周期Manual Tick Full Cycle
simulateTickItem = 启用时钟仿真
simulateTickFreqMenu = 默认时钟频率
simulateTickKFreqItem = %s kHz
simulateUpStateMenu = Go Out To State
simulateVhdlEnableItem = 启用 VHDL 仿真
#
# menu/OpenRecent.java
#
fileOpenRecentItem = 打开最近使用
fileOpenRecentNoChoices = (无文件)
#
# menu/Popups.java
#
circuitMenu = 电路
libMenu = 库
projectAddCircuitItem = 添加电路...
projectAddVhdlItem = 添加 VHDL 实体...
projectAnalyzeCircuitItem = 分析电路
projectEditCircuitAppearanceItem = 编辑电路外观
projectEditCircuitLayoutItem = 编辑电路布局
projectToggleCircuitAppearanceItem = 在布局视图和外观视图间切换
projectEditVhdlItem = 编辑 VHDL 代码
projectGetCircuitStatisticsItem = 统计电路
projectLoadBuiltinItem = 内建库...
projectLoadJarItem = JAR 库...
projectLoadLibraryItem = 载入库
projectLoadLogisimItem = Logisim-evolution 库...
projectReloadLibraryItem = 重载库
projectRemoveCircuitItem = 移除电路
projectRemoveVhdlItem = 移除 VHDL 实体
projectSetAsMainItem = 设为主电路
projectUnloadLibraryItem = 卸载库
projMenu = 项目
vhdlMenu = VHDL 实体
#
# menu/PrintHandler.java
#
couldNotCreateImage = 无法创建图像。
exportImageButton = 导出
exportImageFileSelect = 选择导出文件位置
printError = 打印时出现错误: %s
printErrorTitle = 打印时出现错位
#
# menu/ProjectCircuitActions.java
#
analyzeErrorTitle = 无法分析
analyzeNoExpressionTitle = 未确定的表达式。
analyzeTooManyInputsError = 分析不能处理多于 %s 的输入。
analyzeTooManyOutputsError = 分析不能处理超过 %s 的输出。
circuitCreateTitle = 添加电路动作 Adding circuit action
circuitNameDialogTitle = 输入电路名称
circuitNameExists =  这个名称已经在你的项目中使用，因此不能使用。This name is already in use in your project and can therefore not be used.
circuitNameInvalidName = The name is invalid (it must follow the rule ([a-zA-Z]+\\w*)).
circuitNameKeyword = 这个名称是一个关键字，因此不能使用。This name is a keyword and can therefore not be used.
circuitNameMissingError = 请输入电路名称。Every circuit requires a name.
circuitNamePrompt = 电路名称:
circuitRemoveErrorTitle = 无法移除电路
circuitRemoveLastError = Library must contain at least one circuit.
circuitRemoveUsedError = Circuit used in other circuits cannot be removed.
vhdlNameDialogTitle = 输入 VHDL 实体名称
vhdlNamePrompt = VHDL 实体名称:
#
# menu/ProjectLibraryActions.java
#
jarClassNamePrompt = 类名称Class Name:
jarClassNameTitle = 输入 JAR 类Enter JAR Class
loadBuiltinDialogTitle = 加载内建库
loadBuiltinErrorTitle = 无法载入内建库
loadBuiltinNoneError = 已加载所有内建库。
loadJarDialogTitle = 加载 JAR 文件
loadLogisimDialogTitle = 加载 Logisim 文件
unloadErrorTitle = 无法移除库
unloadLibrariesDialogTitle = 选择要卸载的库
unloadNoneError = All open libraries are in use.
#
# opts/MouseOptions.java
#
mouseHelp = 与鼠标按钮动作相关的编辑工具。
mouseMapNone = 没有选择工具
mouseMapText = Click Using Combination
mouseMapText2 = To Map %s
mouseRemoveButton = 移除
mouseTitle = 鼠标
#
# opts/OptionsActions.java
#
addMouseMappingAction = 添加鼠标映射Add Mouse Mapping
removeMouseMappingAction = 移除鼠标映射Remove Mouse Mapping
setOptionAction = Set %s
#
# opts/OptionsFrame.java
#
optionsFrameMenuItem = %s: Project Options
optionsFrameTitle = Logisim-evolution: %s Project Options
revertButton = 重置所有设置
revertHelp = 将项目设置恢复为模板默认设置。
revertTitle = 重置
#
# opts/SimulateOptions.java
#
gateUndefined = 未定义时的门输出Gate output when undefined
MemoriesStartupUnknown = 内存元素以未知/随机状态开始（而不是0）。Memory elements start in unknown/random state (rather that 0)
simulateHelp = Configure the engine for simulating circuit behavior.
simulateLimit = Iterations until oscillation
simulateRandomness = 为元件延迟添加噪声Add noise to component delays
simulateTitle = 仿真
#
# opts/ToolbarActions.java
#
toolbarAddAction = 添加工具栏按钮
toolbarInsertSepAction = 插入分隔栏
toolbarMoveAction = 移动工具栏按钮
toolbarRemoveAction = 移除工具栏按钮
toolbarRemoveSepAction = 移除分隔栏
#
# opts/ToolbarOptions.java
#
toolbarAddSeparator = 添加分隔栏
toolbarAddTool = 添加工具
toolbarHelp = 编辑工具栏显示的工具。
toolbarMoveDown = 下移
toolbarMoveUp = 上移
toolbarRemove = 移除
toolbarTitle = 工具栏
#
# PrefMonitorBooleanConvert.java
#
OptionConvertAll = Converting current appearance of Pins and Probes
OptionConvertAllPinsProbes = Convert all Pins and Probes in the project to use the appearance "%s"?
OptionNo = No, keep as they are
OptionYes = Yes, convert
#
# prefs/ExperimentalOptions.java
#
accelD3D = Direct 3D
accelDefault = 使用默认
accelLabel = 图形加速引擎:
accelNone = 无
accelOpenGL = OpenGL
accelRestartLabel = Restart Logisim for changes to take effect.
experimentHelp = Enable features that haven't yet been thoroughly tested
experimentTitle = Experimental
#
# prefs/IntlOptions.java
#
intlGateShape = 逻辑门符号标准:
intlHelp = 编辑本地化首选项
intlLocale = 语言:
intlReplaceAccents = 替换重音字符Replace accented characters
intlTitle = 国际化选项
shapeDIN40700 = DIN 40700
shapeRectangular = IEC
shapeShaped = ANSI
#
# prefs/LayoutOptions.java
#
layoutAddAfter = 添加器件之后:
layoutAddAfterEdit = 切换到编辑工具
layoutAddAfterUnchanged = 保持在器件工具
layoutAddShowGhosts = Show ghosts while adding
layoutAnimatedIcons = 使用动画图标Use animated icons
layoutAntiAliasing = 使用抗锯齿
layoutAttributeHalo = 显示属性光环Show attribute halo
layoutDefaultApearance = 使用所提供的默认外观。Use the default appearances provided by:
layoutHelp = 配置布局编辑器的行为Configure behavior of layout editor
layoutMoveKeepConnect = 移动时保持连接Keep connections while moving
layoutNamedCircuitBoxesFixedSize = Use fixed size circuit boxes
layoutPrinterView = Printer view
layoutRadix1 = First radix when wire poked:
layoutRadix2 = Second radix when wire poked:
layoutShowTips = 显示组件提示Show component tips
layoutTitle = 布局
layoutUseNewInputOutputSymbols = 使用新的输入和输出形状 Use new input and output shapes
#
# prefs/PreferencesFrame.java
#
preferencesFrameMenuItem = 首选项
preferencesFrameTitle = Logisim-evolution: 首选项
#
# prefs/SimOptions.java
#
simBusColTitle = 总线颜色:
simColorBlindColors = 色弱颜色
simDefaultColors = 默认颜色
simDontCareCharTitle = 无关项 符号:
simErrorCharTitle = 错误 符号:
simErrorColTitle = 错误 颜色:
simFalseCharTitle = 逻辑假 符号:
simFalseColTitle = 逻辑假 颜色:
simHelp = 编辑仿真时使用的颜色和符号
simKmapColors = Map color %d:
simKmapColorsTitle = Karnaugh diagram map colors:
simNilColTitle = 未连接 颜色:
simStrokeColTitle = 线路/总线信号流向 颜色:
simTitle =仿真
simTrueCharTitle = 逻辑真 符号:
simTrueColTitle = 逻辑真 颜色:
simUnknownCharTitle = 未知状态 符号:
simUnknownColTitle = 未知状态 颜色:
simWidthErrorBackgroundTitle = 位宽错误背景 颜色:
simWidthErrorCaptionTitle = 位宽错误标题 颜色:
simWidthErrorHighlightTitle = 位宽错误高亮 颜色:
simWidthErrorTitle = 位宽错误 颜色:
#
# prefs/TemplateOptions.java
#
selectDialogButton = 选择
selectDialogTitle = 选择模板
templateCustomOption = 自定义模板:
templateEmptyOption = 空模板
templateErrorMessage = 无法载入模板: %s
templateErrorTitle = 载入模板时出错
templateHelp = 选择最近使用的模板
templatePlainOption = 普通模板
templateSelectButton = 选择...
templateTitle = 模板
#
# prefs/WindowOptions.java
#
windowHelp = 配置主编辑窗口
windowTickRate = Show tick rate
windowTitle = 窗口
windowToolbarHidden = 隐藏
windowToolbarImportant =重要提示：更改以下值可能出现不可预测的结果！
windowToolbarLocation = 工具栏位置:
windowToolbarLookandfeel = 外观显示风格:
windowToolbarPleaserestart = 修改后请重新启动 logisim。
windowToolbarPreview = 预览
windowToolbarReset = 将窗口布局重置为默认设置
windowToolbarZoomfactor = 缩放倍数
#
# start/AboutCredits.java
#
creditsRoleFork = Fork from original project
creditsRoleOriginal = Original Version
#
# start/SplashScreen.java
#
progressFileCreate = 创建文件...
progressFileLoad = 载入文件...
progressFrameCreate = 创建窗口...
progressGuiInitialize = 初始化面板...
progressLibraries = 载入器件...
progressProjectCreate = 创建项目...
progressTemplateClose = 关闭模板...
progressTemplateCreate = 创建模板...
progressTemplateLoad = 载入模板...
progressTemplateOpen = 打开模板...
startupCloseButton = 关闭
startupQuitButton = 退出
#
# start/Startup.java
#
argAccentsOption = -accents yes|no               use accented characters or ASCII equivalents
argAccentsOptionError = Argument for -accents option must be "yes" or "no".
argAnalyzeOption = -analyze          enable the analyze option
argCircuitOption = -circuit name     test the given circuit instead of main, used with "-tty table"
argClearOption = -clearprefs       clear application preferences at startup
argDuplicateSubstitutionError = Cannot substitute the same file multiple times.
argEmptyOption = -empty                        use empty template
argGatesOption = -gates style                  select "shaped" or "rectangular" gate style
argGatesOptionError = Argument for -gates option must be "shaped" or "rectangular".
argGeometryError = Argument for -geom must be "WxH" or "WxH+X+Y"
argGeometryOption = -geom WxH[+X+Y]  set geometry for main window
argHelpOption = -help             display this summary and exit
argLoadOption = -load file        load image file into RAM (works with -tty only)
argLocaleOption = -locale str                   use locale given in str
argNoSplashOption = -nosplash         hides splash screen at startup
argNoUpdatesOption = -noupdates        disable automatic updates
argOneTemplateError = Only one template allowed.
argOptionHeader = options:
argPlainOption = -plain                        use standard Logisim template
argQuestaOption = -questa yes|no    use Questa Advanced Simulator to validate HDL entities
argQuestaOptionError = Argument for -questa option must be "yes" or "no".
argSubOption = -sub file1 file2  load file replacing library file1 with file2
argTemplateOption = -template file                use file as template
argTestCircGen = -test-circ-gen <circ_input> <circ_output> open up the circ file and write a new one to later check the Xml content
argTestCircuit = -test-circuit <path_to_circ> open up a circ file and start the test bench within it. It returns Success or fail.
argTestImplement=-test-fpga-implementation  <circ_input> [map_input] <circuit_name> <board> [tick frequency] [HDLONLY]: Test implementations design using circ_input file and optional map_input mapping file (obsolete since v3.3.3). The implementation circuit_name is the circuit choose to implement (FPGA_Top) and the board is the board name located in resources/logisim/boards/ without the xml extension. The optional tick frequency is in Hz. The optional switch HDLONLY will only generate the HDL-description and will not perform synthesis, P&R, and Download.
argTestOption = -test name file   run test vector from a file against named circuit, then exit
argTtyOption = -tty format       run without graphical interface
argTwoSubstitutionError = The "-sub" option must be followed by two parameters.
argUsage = usage: java %s [options] [filenames]
argVersionOption = -version          display version number and exit
invalidLocaleError = Locale given is not supported.
invalidLocaleOptionsHeader = Supported locales:
loadMultipleError = The "-load" option can be specified only once.
loadNeedsFileError = Using "-load" requires a filename provided on command line.
loadNeedsTtyError = The "-load" option works only in conjunction with "-tty".
templateCannotReadError = No permission to read template file %s.
templateMissingError = Template file %s does not exist.
ttyFormatError = -tty requires at least one of the following: halt, speed, stats, table, tty
ttyNeedsFileError = Using "-tty" requires a filename provided on command line.
#
# start/TtyInterface.java
#
loadIoError = 读取镜像文件时出错
loadNoRamError = No RAM was found for the "-load" option.
statsTotalWith = TOTAL (with sub circuits)
statsTotalWithout = TOTAL (without project's sub circuits)
ttyHaltReasonOscillation = halted due to detected oscillation
ttyHaltReasonPin = halted due to halt pin
ttyLoadError = Error loading circuit file: %s
ttyNoTtyError = No TTY or Keyboard component was found.
ttySpeedMsg = %s Hz (%s ticks in %s milliseconds)
#
# test/TestFrame.java
#
failMessage = 失败: %s
fileCannotParseMessage = Test vector in "%s" could not be parsed.\n Detail: %s.
fileCannotReadMessage = 你没有权限读取 "%s"。
fileCannotReadTitle = 文件不可用
fileWrongPinsMessage = Test vector in "%s" does not match circuit.\n Details: %s.
fileWrongPinsTitle = Error Loading Test Vector
loadButton = Load Vector
passMessage = Passed: %s
resetButton = 重置
runButton = 运行
stopButton = 停止
testFrameMenuItem = %s: Test Vector
testFrameTitle = Logisim: Test Vector %s of %s
#
# test/TestPanel.java
#
expectedValueMessage = Expected %s
failStatus = 失败
passStatus = 通过
statusHeader = 状态
#
# test/TestThread.java
#
testFailed = Error on test vector %s:
testLoadingFailed = Error loading test vector: %s
testLoadingVector = Loading test vector "%s" ...
testResults = Passed: %s, Failed: %s
testRunning = Running %s vectors ...
testSetupFailed = Error preparing test vector: %s
untitled=未标题


